#!/usr/bin/env bash
#
# Copyright (C) 2013 Rafal Jeczalik <rjeczalik@gmail.com>
# Distributed under the MIT license, see License.md for details.
#
# $origin: bitbucket.org/rjeczalik/gowrk
#

readlink -f . >/dev/null 2>&1 && _readlnk=readlink || _readlnk=greadlink

GOPATH=`dirname $(${_readlnk} -f "${BASH_SOURCE[0]}")`
GOBIN=${GOPATH}/bin

_usage() {
  echo "usage: gowrk up        | commit submodules HEADs"
  echo "       ----------------+------------------------------"
  echo "       gowrk lint      | check code style"
  echo "       gowrk           | runs go test -race over any"
  echo "                       | package added as a submodule"
  echo "                       | under ./src directory"
  echo "       gowrk verbose   | same as above plus does not"
  echo "                       | suppress stdout nor stderr"
  echo "       gowrk 'reg.*ex' | tests packages that match"
  echo "                       | pattern; can be combined with"
  echo "                       | verbose"  
  echo "       ----------------+------------------------------"
  echo "       gowrk help      | print this help message"
  echo
}

_die() {
  [ -z "${*}" ] || echo "gowrk: ${*}"
  exit 1
}

_die_usage() {
  [ -z "${*}" ] || ( echo "gowrk: ${*}"; echo )
  _usage
  exit 1
}

_do_projects_exist() {
  if [ `git submodule | perl -ne '/\s[\w\d]+\ssrc\/(.*)\s\(.*/&&print"$1\n"' | wc -l` -gt 0 ]; then
    return 0
  fi
  return 1
}

_die_no_projects() {
  if ! _do_projects_exist; then
    _die "no projects found in your submodules"
  fi
}

_do_up() {
  local updated_submodules=(`cd "${GOPATH}"; git status -uno | perl -ne '/#\s+modified:\s+src\/(.*)\s\(new commits\)/&&print "$1\n"'`)

  if [ ${#updated_submodules} -gt 0 ]; then
    local commit_message=`cd "${GOPATH}"; echo "submodules' HEAD refs update:"; echo;
                          for sub in ${updated_submodules[@]}; do
                            git add "src/\${sub}"
                            echo "  * \${sub}@$(cd "src/\${sub}"; git rev-parse --short HEAD)";
                          done`

    git commit -m"${commit_message}"
  else
    _die "no changes in refs"
  fi
}

_do_lint() {
  if type -f golint &>/dev/null; then
    git submodule foreach golint .
  else
    go get github.com/golang/lint
    go install github.com/golang/lint/golint
    git submodule foreach "${GOBIN}"/golint .
  fi
}

_do_test() {
  local verbose=${1}
  local regex=${2}
  _dirnames() {
    while read file; do
      dirname ${file}
    done
  }
  if [ ! -z "${regex}" ]; then
    _filter() {
      while read pkg; do
        [[ ${pkg} =~ ${regex} ]] && echo ${pkg}
      done
    }
  else
    _filter() {
      while read pkg; do
        echo ${pkg}
      done
    }
  fi

  git submodule foreach gofmt -w=true -s=true . | grep -Ev ^Entering
  git submodule foreach \
    find . -type f -name \'*.go\' -exec ${_readlnk} -esf {} \\\; |
              grep -Ev ^Entering | _dirnames    |
                            sort | uniq         |
          sed s:${GOPATH}/src/:: | _filter      |
                    tr '\n' ' '  | xargs echo   | while read packages; do
                                                    if [ ! -z "${packages}" ]; then
                                                      go vet ${packages}
                                                      if [ ! -z "${verbose}" ]; then
                                                        for pkg in ${packages}; do
                                                          ( cd ${GOPATH}/src/${pkg}; go test -race )
                                                        done
                                                      else
                                                        go test -race -i ${packages}
                                                        go test -race ${packages}
                                                      fi
                                                    fi
                                                  done
}

_do_source() {
  PATH=${GOBIN}:${PATH}
  export GOPATH GOBIN PATH
  for f in ${GOPATH}/.gowrkrc ${GOPATH}/.gowrkrc.d/*; do
    [ -f "${f}" ] && source "${f}"
  done
}

_main() {
  local verbose=
  local regex=${1}
  if [ "${1}" == "verbose" ]; then 
    verbose=1
    regex=${2}
  elif [ "${2}" == "verbose" ]; then
    verbose=1
  fi
  if [ ! ${#} -gt 1 ] || ( [ ${#} -eq 2 ] && [ ! -z "${verbose}" ] ); then
    case "${1}" in
      "up" )
        _do_up
        ;;
      "lint" )
        _die_no_projects
        _do_lint
        ;;
      "help" )
        _usage
        ;;
      "" | "verbose" | *)
        _die_no_projects
        _do_test "`[ ! -z "${verbose}" ] && echo 1`" "${regex}"
        ;;
    esac
  else
    _die_usage "unknown flags: ${*}"
  fi
}

if [ "${BASH_SOURCE[0]}" != "${0}" ]; then
  _do_source
elif [ "`pwd -P`" != "${GOPATH}" ]; then
  _die "gowrk must be run from ${GOPATH}"
else
  _main ${*}
fi
